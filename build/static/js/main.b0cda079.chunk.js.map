{"version":3,"sources":["js/ImageLogic.js","components/SearchBar/SearchBar.js","components/Ad/Ad.js","App.js","serviceWorker.js","index.js"],"names":["imageArray","adArray","get_index","arrayLength","hour","Date","getMinutes","console","log","index","pull_image","length","pull_ad","SearchBar","e","target","value","key","inputQuery","remove_space","replace","window","location","searchGoogle","class","type","placeholder","onClick","this","sendToSearch","onKeyPress","handleKeyPress","style","fontSize","React","Component","AdImage","state","adSource","setState","src","width","hight","position","bottom","justifyContent","App","headerStyle","backgroundImage","className","Ad","display","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAAIA,G,kBAAa,CACb,iFACA,0EACA,0EACA,8FACA,6FACA,mFACA,4DACA,8DAGAC,EAAU,CACV,mEACA,oEAKJ,SAASC,EAAUC,GACf,IACIC,GADQ,IAAIC,MACEC,aAClBC,QAAQC,IAAIJ,GAGZ,IAAIK,EAASL,EAAOD,EAEpB,OADAI,QAAQC,IAAIC,GACLA,EAEJ,SAASC,IACZ,IAAID,EAAQP,EAAUF,EAAWW,QACjC,OAAOX,EAAWS,GAGf,SAASG,IACZ,IAAIH,EAAQP,EAAUD,EAAQU,QAC9B,OAAOV,EAAQQ,G,uCCmBJI,G,8OA3BAC,GACXP,QAAQC,IAAIM,EAAEC,OAAOC,S,qCAGRF,GACA,UAAVA,EAAEG,MACHV,QAAQC,IAAIM,EAAEC,OAAOC,OAzBR,SAASE,GAC1B,IAAIC,EAAeD,EAAWE,QAAQ,IAAK,OAE3CC,OAAOC,SAASF,QADI,mCACoBD,GAuBpCI,CAAaT,EAAEC,OAAOC,U,+BAKvB,OACC,8BAAUQ,MAAM,mBACd,2BAAOC,KAAK,OAAOC,YAAY,gBAAgBF,MAAM,QAAQG,QAASC,KAAKC,aAAcC,WAAYF,KAAKG,eAAgBC,MAAO,CAACC,SAAW,UAC7I,yBAAKT,MAAM,mBACX,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,cACP,yBAAKA,MAAM,SACX,yBAAKA,MAAM,kB,GAhCCU,IAAMC,YCSfC,E,2MAjBXC,MAAQ,CACJC,SAAW,oE,mFAMbV,KAAKW,SAAS,CAACD,SAAW1B,Q,+BAI3B,OACG,yBAAK4B,IAAKZ,KAAKS,MAAMC,SAAUN,MAAO,CAACS,MAAO,QAASC,MAAO,OAAQC,SAAU,QAASC,OAAQ,OAAQC,eAAgB,gB,GAb3GX,IAAMC,WC0BbW,MAnBf,WAGE,IAAMC,EAAc,CAClBC,gBAAiB,OAAStC,IAAe,KAE3C,OACE,yBAAKuC,UAAU,OACb,4BAAQA,UAAU,aAAajB,MAASe,GACtC,kBAAC,EAAD,MACA,kBAACG,EAAD,OAEF,4BAAQV,IAAI,qCAAqCR,MAAS,CAACmB,QAAU,SAArE,0CCZcC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0cda079.chunk.js","sourcesContent":["var imageArray = [\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/space-1582086567693-669.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/temp-image-block.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/background-photo.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/boris-baldinger-VEkIsvDviSs-unsplash.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/lucas-benjamin-wQLAGv4_OYs-unsplash.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/nasa-Q1p7bh3SHj8-unsplash.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/01.jpg\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/02.jpg\"\n]\n\nvar adArray = [\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/ads/ad-01.png\",\n    \"https://new-tab-images.sfo2.digitaloceanspaces.com/ads/ad-02.png\"\n]\n\n\n\nfunction get_index(arrayLength){\n    var today = new Date();\n    var hour =  today.getMinutes();\n    console.log(hour);\n    // The larger number should be before the modulo. Eventually we'll want 25 photos in an array.\n    // Array length would go first\n    var index = (hour % arrayLength) ;\n    console.log(index);\n    return index;\n}\nexport function pull_image(){\n    var index = get_index(imageArray.length)\n    return imageArray[index];\n}\n\nexport function pull_ad(){\n    var index = get_index(adArray.length);\n    return adArray[index];\n}\n\n\n","import React from 'react';\n\nimport './SearchBar.css';\n\nimport ReactGA from 'react-ga';\n\n\n\nvar searchGoogle = function(inputQuery){\n  var remove_space = inputQuery.replace(\" \", \"%20\");\n  var google_prefix = \"https://www.google.com/search?q=\";\n  window.location.replace(google_prefix + remove_space);\n}\n\nclass SearchBar extends React.Component{\n\n  componentDidMount(){\n    /*\n    ReactGA.initialize('UA-157539580-1');\n\n    // https://stackoverflow.com/questions/16135000/how-do-you-integrate-universal-analytics-in-to-chrome-extensions/22152353#22152353\n    ReactGA.ga('set', 'checkProtocolTask', null);\n    \n    ReactGA.pageview(\"/new-tab\");\n    */\n  }\n\n  sendToSearch(e){\n    console.log(e.target.value);\n  }\n\n  handleKeyPress(e){\n    if(e.key === \"Enter\"){\n      console.log(e.target.value);\n      searchGoogle(e.target.value);\n    }\n  }\n\n  render() {\n     return (\n      <fieldset class=\"field-container\">\n        <input type=\"text\" placeholder=\"Search Google\" class=\"field\" onClick={this.sendToSearch} onKeyPress={this.handleKeyPress} style={{fontSize : '20px'}}/>\n        <div class=\"icons-container\">\n        <div class=\"icon-search\"></div>\n        <div class=\"icon-close\">\n            <div class=\"x-up\"></div>\n            <div class=\"x-down\"></div>\n        </div>\n        </div>\n      </fieldset>\n     );\n     }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nimport {pull_ad} from '../../js/ImageLogic.js';\n\n\nclass AdImage extends React.Component{\n    state = {\n        adSource : \"https://new-tab-images.sfo2.digitaloceanspaces.com/ads/ad-02.png\"\n    }\n\n    \n  \n  componentDidMount(){\n      this.setState({adSource : pull_ad()})\n  }\n\n  render() {\n     return (\n        <img src={this.state.adSource} style={{width: '728px', hight: '90px', position: 'fixed', bottom: '10px', justifyContent: 'center'}}></img>\n     )\n  }\n}\n\nexport default AdImage;\n","import React from 'react';\n\nimport './css/App.css';\nimport './css/BackgroundImage.css';\n\nimport {pull_image} from './js/ImageLogic.js';\n\nimport SearchBar from './components/SearchBar/SearchBar';\nimport AdImage from './components/Ad/Ad.js';\n\n\n\nfunction App() {\n\n  \n  const headerStyle = {\n    backgroundImage: 'url(' + pull_image() + ')',\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style = {headerStyle}>\n        <SearchBar></SearchBar>\n        <AdImage></AdImage>\n      </header>\n      <iframe src=\"http://tabforgood.com/new-tab.html\" style = {{display : 'None'}}>\n        Your browser doesn't support iframes\n      </iframe>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}